// <auto-generated />
using System;
using Hospitl_Mangement_MVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hospitl_Mangement_MVC.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    [Migration("20250529135200_three")]
    partial class three
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hospitl_Mangement_MVC.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDate = new DateTime(2025, 5, 30, 13, 51, 57, 548, DateTimeKind.Utc).AddTicks(3882),
                            DoctorId = "doc1",
                            PatientId = "pat1",
                            Reason = "Routine Check",
                            Status = "Scheduled"
                        });
                });

            modelBuilder.Entity("Hospitl_Mangement_MVC.Models.BaseEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Hospitl_Mangement_MVC.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Describe")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ImageURL")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentName = "Cardiology",
                            Describe = "Heart-related treatments",
                            Location = "Building A"
                        },
                        new
                        {
                            Id = 2,
                            DepartmentName = "Neurology",
                            Describe = "Brain and nervous system",
                            Location = "Building B"
                        });
                });

            modelBuilder.Entity("Hospitl_Mangement_MVC.Models.Medication", b =>
                {
                    b.Property<int>("MedicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationID"));

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Frequenccy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrescriptionID")
                        .HasColumnType("int");

                    b.Property<string>("SideEffectes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicationID");

                    b.HasIndex("PrescriptionID");

                    b.ToTable("Medications");

                    b.HasData(
                        new
                        {
                            MedicationID = 1,
                            Dosage = "500mg",
                            Frequenccy = "Twice a day",
                            MedicationName = "Paracetamol",
                            SideEffectes = "Nausea"
                        });
                });

            modelBuilder.Entity("Hospitl_Mangement_MVC.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionID"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("MedicationID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TreatmentID")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionID");

                    b.ToTable("Prescriptions");

                    b.HasData(
                        new
                        {
                            PrescriptionID = 1,
                            Duration = 5,
                            MedicationID = 1,
                            Quantity = 10,
                            TreatmentID = 1
                        });
                });

            modelBuilder.Entity("Hospitl_Mangement_MVC.Models.Treatment", b =>
                {
                    b.Property<int>("TreatmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreatmentId"));

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PatientID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TreatmentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TreatmentId");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID")
                        .IsUnique();

                    b.ToTable("Treatments");

                    b.HasData(
                        new
                        {
                            TreatmentId = 1,
                            Diagnosis = "Flu",
                            DoctorID = "doc1",
                            EndDate = new DateTime(2025, 5, 29, 13, 51, 57, 548, DateTimeKind.Utc).AddTicks(3742),
                            PatientID = "pat1",
                            SartDate = new DateTime(2025, 5, 24, 13, 51, 57, 548, DateTimeKind.Utc).AddTicks(3725),
                            TreatmentDescription = "Rest and hydration"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Hospitl_Mangement_MVC.Models.Doctor", b =>
                {
                    b.HasBaseType("Hospitl_Mangement_MVC.Models.BaseEntity");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Speciatly")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Doctors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "doc1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "998ee1dd-2bc0-43fe-a837-7ca9481ba9ef",
                            Email = "ahmed@example.com",
                            EmailConfirmed = true,
                            First_Name = "Ahmed",
                            Last_Name = "Youssef",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMED@EXAMPLE.COM",
                            NormalizedUserName = "AHMED@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d08e174c-187d-410e-8df8-230f8019b0cd",
                            TwoFactorEnabled = false,
                            UserName = "ahmed@example.com"
                        });
                });

            modelBuilder.Entity("Hospitl_Mangement_MVC.Models.Patient", b =>
                {
                    b.HasBaseType("Hospitl_Mangement_MVC.Models.BaseEntity");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Birthdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Emergancy_Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("int");

                    b.ToTable("Patients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "pat1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f88a6b23-03c3-4f12-8bb1-d78d12c4e015",
                            Email = "sara@example.com",
                            EmailConfirmed = true,
                            First_Name = "Sara",
                            Last_Name = "Mohamed",
                            LockoutEnabled = false,
                            NormalizedEmail = "SARA@EXAMPLE.COM",
                            NormalizedUserName = "SARA@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c39e44d2-355e-46fd-8dee-35c0a74405ae",
                            TwoFactorEnabled = false,
                            UserName = "sara@example.com",
                            Address = "123 Main St",
                            Birthdate = "1990-01-01",
                            Emergancy_Contact = "01012345678",
                            Gender = "Female",
                            TreatmentId = 1
                        });
                });

            modelBuilder.Entity("Hospitl_Mangement_MVC.Models.Staff", b =>
                {
                    b.HasBaseType("Hospitl_Mangement_MVC.Models.BaseEntity");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoleId");

                    b.ToTable("Staffs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "staff1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1c033f12-5a9b-4632-b2e8-3e1b3076c7ee",
                            Email = "mona@example.com",
                            EmailConfirmed = true,
                            First_Name = "Mona",
                            Last_Name = "Ali",
                            LockoutEnabled = false,
                            NormalizedEmail = "MONA@EXAMPLE.COM",
                            NormalizedUserName = "MONA@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d7dfbdb-55e6-4a73-bd1d-4d6217c801f7",
                            TwoFactorEnabled = false,
                            UserName = "mona@example.com"
                        });
                });

            modelBuilder.Entity("Hospitl_Mangement_MVC.Models.Appointment", b =>
                {
                    b.HasOne("Hospitl_Mangement_MVC.Models.Doctor", "Doctor")
                        .WithMany("Appointment")
                        .HasForeignKey("DoctorId");

                    b.HasOne("Hospitl_Mangement_MVC.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Hospitl_Mangement_MVC.Models.Medication", b =>
                {
                    b.HasOne("Hospitl_Mangement_MVC.Models.Prescription", null)
                        .WithMany("Medications")
                        .HasForeignKey("PrescriptionID");
                });

            modelBuilder.Entity("Hospitl_Mangement_MVC.Models.Treatment", b =>
                {
                    b.HasOne("Hospitl_Mangement_MVC.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospitl_Mangement_MVC.Models.Patient", "Patient")
                        .WithOne("Treatment")
                        .HasForeignKey("Hospitl_Mangement_MVC.Models.Treatment", "PatientID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Hospitl_Mangement_MVC.Models.BaseEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Hospitl_Mangement_MVC.Models.BaseEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospitl_Mangement_MVC.Models.BaseEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Hospitl_Mangement_MVC.Models.BaseEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hospitl_Mangement_MVC.Models.Doctor", b =>
                {
                    b.HasOne("Hospitl_Mangement_MVC.Models.Department", "Department")
                        .WithMany("Doctor")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Hospitl_Mangement_MVC.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("Hospitl_Mangement_MVC.Models.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Hospitl_Mangement_MVC.Models.Patient", b =>
                {
                    b.HasOne("Hospitl_Mangement_MVC.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("Hospitl_Mangement_MVC.Models.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hospitl_Mangement_MVC.Models.Staff", b =>
                {
                    b.HasOne("Hospitl_Mangement_MVC.Models.Department", "Department")
                        .WithMany("Staff")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Hospitl_Mangement_MVC.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("Hospitl_Mangement_MVC.Models.Staff", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Department");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Hospitl_Mangement_MVC.Models.Department", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Hospitl_Mangement_MVC.Models.Prescription", b =>
                {
                    b.Navigation("Medications");
                });

            modelBuilder.Entity("Hospitl_Mangement_MVC.Models.Doctor", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Hospitl_Mangement_MVC.Models.Patient", b =>
                {
                    b.Navigation("Treatment")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
